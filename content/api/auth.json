{
  "openapi": "3.1.1",
  "info": {
    "title": "Auth API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://dev-api.versasocial.com.br/api/v1",
      "description": "Servidor de desenvolvimento"
    },
    {
      "url": "https://homo-api.versasocial.com.br/api/v1",
      "description": "Servidor de homologação"
    },
    {
      "url": "https://api.versasocial.com.br/api/v1",
      "description": "Servidor de produção"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "Autenticação"
        ],
        "summary": "Gerar um token de acesso pessoal para autenticação do operador.",
        "description": "Este endpoint permite que os operadores se autentiquem fornecendo suas credenciais. Após a autenticação bem-sucedida, ele gera e retorna um token de acesso pessoal que pode ser usado para acessar recursos protegidos. O token é essencial para fazer solicitações autenticadas a outros endpoints dentro do sistema.",
        "operationId": "login",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Domain"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Resposta de login bem-sucedido com o token de acesso gerado. A resposta inclui o token em um objeto JSON, que o operador pode usar para autenticar solicitações futuras.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResource"
                }
              }
            }
          },
          "422": {
            "description": "Resposta de erro para campos ausentes ou inválidos na solicitação de login.",
            "content": {
              "application/json": {
                "example": {
                  "message": "O campo login é obrigatório. (e mais 1 erro)",
                  "errors": {
                    "login": [
                      "O campo login é obrigatório."
                    ],
                    "password": [
                      "O campo password é obrigatório."
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Autenticação"
        ],
        "summary": "Atualizar um token de acesso expirado.",
        "description": "Este endpoint permite que os operadores atualizem um token de acesso expirado fornecendo um token de atualização válido. O token de atualização é um token de longa duração que pode ser usado para obter um novo token de acesso sem fornecer as credenciais do operador novamente.",
        "operationId": "refresh",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Domain"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Resposta de atualização bem-sucedida com o novo token de acesso gerado.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResource"
                }
              }
            }
          },
          "401": {
            "description": "Erro de autenticação. O token de acesso fornecido é inválido ou expirou.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Sessão Expirada."
                }
              }
            }
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "tags": [
          "Autenticação"
        ],
        "summary": "Solicitar redefinição de senha.",
        "description": "Este endpoint permite que os operadores solicitem a redefinição de sua senha fornecendo seu e-mail. Após a solicitação, um e-mail de redefinição de senha é enviado ao operador com um link seguro para redefinir sua senha.",
        "operationId": "forgotPassword",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Domain"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Resposta de solicitação de redefinição de senha bem-sucedida.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Um e-mail de redefinição de senha foi enviado para o endereço fornecido."
                }
              }
            }
          },
          "422": {
            "description": "Resposta de erro para campos ausentes ou inválidos na solicitação de redefinição de senha.",
            "content": {
              "application/json": {
                "example": {
                  "message": "O campo login é obrigatório.",
                  "errors": {
                    "login": [
                      "O campo login é obrigatório."
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": [
          "Autenticação"
        ],
        "summary": "Redefinir a senha do operador.",
        "description": "Este endpoint permite que os operadores redefinam sua senha fornecendo um token de redefinição de senha e a nova senha desejada. O token de redefinição de senha é enviado ao operador por e-mail após a solicitação de redefinição de senha.",
        "operationId": "resetPassword",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Domain"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "login",
                  "password"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "token here"
                  },
                  "login": {
                    "type": "string",
                    "example": "john.doe"
                  },
                  "password": {
                    "type": "string",
                    "example": "new password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Resposta de redefinição de senha bem-sucedida.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Sua senha foi redefinida com sucesso."
                }
              }
            }
          },
          "422": {
            "description": "Resposta de erro para campos ausentes ou inválidos na solicitação de redefinição de senha.",
            "content": {
              "application/json": {
                "example": {
                  "message": "O campo token é obrigatório. (e mais 2 erros)",
                  "errors": {
                    "token": [
                      "O campo token é obrigatório."
                    ],
                    "login": [
                      "O campo login é obrigatório."
                    ],
                    "password": [
                      "O campo password é obrigatório."
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Autenticação"
        ],
        "summary": "Revogar um token de acesso.",
        "description": "Este endpoint permite que os operadores revoguem um token de acesso fornecendo o token a ser revogado. Após a revogação, o token não pode mais ser usado para acessar recursos protegidos.",
        "operationId": "logout",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Domain"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Resposta de logout bem-sucedida."
          },
          "401": {
            "description": "Erro de autenticação. O token de acesso fornecido é inválido ou expirou.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Sessão Expirada."
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": [
          "Autenticação"
        ],
        "summary": "Obter informações do operador autenticado.",
        "description": "Este endpoint permite que os operadores obtenham informações sobre o operador autenticado com base no token de acesso fornecido. As informações incluem o ID do operador, nome, e-mail e outras informações relevantes.",
        "operationId": "me",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Domain"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Resposta de sucesso com as informações do operador autenticado.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperatorResource"
                }
              }
            }
          },
          "401": {
            "description": "Erro de autenticação. O token de acesso fornecido é inválido ou expirou.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Sessão Expirada."
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "JWT Bearer token authentication"
      }
    },
    "parameters": {
      "accept": {
        "name": "Accept",
        "in": "header",
        "required": false,
        "schema": {
          "type": "string",
          "default": "application/json"
        },
        "description": "Tipo de mídia aceito na resposta."
      },
      "X-Domain": {
        "name": "X-Domain",
        "in": "header",
        "required": false,
        "schema": {
          "type": "string",
          "default": "development.versasocial.com.br"
        },
        "description": "Domínio do Tenant para a identificação do contexto de execução."
      },
      "page": {
        "name": "page",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "Número da página a ser exibida."
      },
      "per_page": {
        "name": "per_page",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "Número de itens por página."
      },
      "sort_field": {
        "name": "sort_field",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Campo pelo qual os resultados devem ser ordenados."
      },
      "sort_order": {
        "name": "sort_order",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Ordem de classificação dos resultados."
      },
      "search": {
        "name": "search",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Termo de pesquisa para filtrar os resultados."
      },
      "log": {
        "name": "log",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean"
        },
        "description": "Ativar o registro de log para a solicitação."
      },
      "start_date": {
        "name": "start_date",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date"
        },
        "description": "Data de início do filtro."
      },
      "end_date": {
        "name": "end_date",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date"
        },
        "description": "Data de término do filtro."
      }
    },
    "schemas": {
      "Links": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "example": "Api Path"
          },
          "last": {
            "type": "string",
            "example": "Api Path"
          },
          "prev": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "next": {
            "type": "string",
            "nullable": true,
            "example": null
          }
        }
      },
      "Meta": {
        "type": "object",
        "properties": {
          "current_page": {
            "type": "integer",
            "example": 1
          },
          "from": {
            "type": "integer",
            "example": 1
          },
          "last_page": {
            "type": "integer",
            "example": 1
          },
          "links": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "nullable": true,
                  "example": null
                },
                "label": {
                  "type": "string",
                  "example": "&laquo; Previous"
                },
                "active": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          },
          "path": {
            "type": "string",
            "example": "Api Path"
          },
          "per_page": {
            "type": "integer",
            "example": 20
          },
          "to": {
            "type": "integer",
            "example": 1
          },
          "total": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "Login": {
        "type": "object",
        "required": [
          "login",
          "password"
        ],
        "properties": {
          "login": {
            "type": "string",
            "example": "admin"
          },
          "password": {
            "type": "string",
            "example": "password"
          }
        }
      },
      "LoginResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "Bearer"
          },
          "token": {
            "type": "string",
            "example": "Bearer token here"
          },
          "redirect": {
            "type": "string",
            "example": "https://example.com/dashboard"
          },
          "force_change_password": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "TokenResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "Bearer"
          },
          "token": {
            "type": "string",
            "example": "Bearer token here"
          }
        }
      },
      "ForgotPassword": {
        "type": "object",
        "required": [
          "login"
        ],
        "properties": {
          "login": {
            "type": "string",
            "example": "user@example.com"
          }
        }
      },
      "OperatorResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string",
            "example": "Administrador"
          },
          "birth_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": null
          },
          "gender": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "cpf": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "education_level": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "profession": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "bond_type": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "work_role": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "other_work_role": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "admission_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": null
          },
          "workload": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "work_activities": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": []
          },
          "login": {
            "type": "string",
            "example": "admin"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "admin@example.com"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Administrador"
            ]
          },
          "units": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "example": "00000000-0000-0000-0000-000000000000"
                },
                "unit_type": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "example": "00000000-0000-0000-0000-000000000000"
                    },
                    "name": {
                      "type": "string",
                      "example": "Centro de Referência Especializado de Assistência Social - CREAS"
                    }
                  }
                },
                "name": {
                  "type": "string",
                  "example": "Centro de Referência Especializado de Assistência Social"
                },
                "code": {
                  "type": "string",
                  "example": "0"
                },
                "active": {
                  "type": "boolean",
                  "example": true
                },
                "description": {
                  "type": "string",
                  "example": "A unidade deve, obrigatoriamente, ofertar o Serviço de Proteção e Atendimento Especializado a Famílias e Indivíduos (PAEFI), podendo ofertar outros serviços..."
                },
                "address": {
                  "type": "object",
                  "properties": {
                    "street": {
                      "type": "string",
                      "example": "Rua Princesa Isabel"
                    },
                    "number": {
                      "type": "string",
                      "example": "151"
                    },
                    "neighborhood": {
                      "type": "string",
                      "example": "Centro"
                    },
                    "city": {
                      "type": "string",
                      "example": "Caratinga"
                    },
                    "state": {
                      "type": "string",
                      "example": "MG"
                    },
                    "postal_code": {
                      "type": "string",
                      "example": "35300074"
                    }
                  }
                },
                "complexity": {
                  "type": "string",
                  "example": "high"
                }
              }
            }
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ALL-access-admin-panel",
              "ALL-get-versa360-client"
            ]
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "avatar": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-09T12:34:44.000000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-06-09T17:11:32.000000Z"
          }
        }
      }
    }
  }
}